<?php
/**
 * PredictiveAnalytics
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2023-02-22
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * PredictiveAnalytics Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PredictiveAnalytics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PredictiveAnalytics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'historic_clv' => 'float',
        'predicted_clv' => 'float',
        'total_clv' => 'float',
        'historic_number_of_orders' => 'int',
        'predicted_number_of_orders' => 'float',
        'average_days_between_orders' => 'float',
        'average_order_value' => 'float',
        'churn_probability' => 'float',
        'expected_date_of_next_order' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'historic_clv' => null,
        'predicted_clv' => null,
        'total_clv' => null,
        'historic_number_of_orders' => null,
        'predicted_number_of_orders' => null,
        'average_days_between_orders' => null,
        'average_order_value' => null,
        'churn_probability' => null,
        'expected_date_of_next_order' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'historic_clv' => 'historic_clv',
        'predicted_clv' => 'predicted_clv',
        'total_clv' => 'total_clv',
        'historic_number_of_orders' => 'historic_number_of_orders',
        'predicted_number_of_orders' => 'predicted_number_of_orders',
        'average_days_between_orders' => 'average_days_between_orders',
        'average_order_value' => 'average_order_value',
        'churn_probability' => 'churn_probability',
        'expected_date_of_next_order' => 'expected_date_of_next_order'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'historic_clv' => 'setHistoricClv',
        'predicted_clv' => 'setPredictedClv',
        'total_clv' => 'setTotalClv',
        'historic_number_of_orders' => 'setHistoricNumberOfOrders',
        'predicted_number_of_orders' => 'setPredictedNumberOfOrders',
        'average_days_between_orders' => 'setAverageDaysBetweenOrders',
        'average_order_value' => 'setAverageOrderValue',
        'churn_probability' => 'setChurnProbability',
        'expected_date_of_next_order' => 'setExpectedDateOfNextOrder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'historic_clv' => 'getHistoricClv',
        'predicted_clv' => 'getPredictedClv',
        'total_clv' => 'getTotalClv',
        'historic_number_of_orders' => 'getHistoricNumberOfOrders',
        'predicted_number_of_orders' => 'getPredictedNumberOfOrders',
        'average_days_between_orders' => 'getAverageDaysBetweenOrders',
        'average_order_value' => 'getAverageOrderValue',
        'churn_probability' => 'getChurnProbability',
        'expected_date_of_next_order' => 'getExpectedDateOfNextOrder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['historic_clv'] = $data['historic_clv'] ?? null;
        $this->container['predicted_clv'] = $data['predicted_clv'] ?? null;
        $this->container['total_clv'] = $data['total_clv'] ?? null;
        $this->container['historic_number_of_orders'] = $data['historic_number_of_orders'] ?? null;
        $this->container['predicted_number_of_orders'] = $data['predicted_number_of_orders'] ?? null;
        $this->container['average_days_between_orders'] = $data['average_days_between_orders'] ?? null;
        $this->container['average_order_value'] = $data['average_order_value'] ?? null;
        $this->container['churn_probability'] = $data['churn_probability'] ?? null;
        $this->container['expected_date_of_next_order'] = $data['expected_date_of_next_order'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets historic_clv
     *
     * @return float|null
     */
    public function getHistoricClv()
    {
        return $this->container['historic_clv'];
    }

    /**
     * Sets historic_clv
     *
     * @param float|null $historic_clv Total value of all historically placed orders
     *
     * @return self
     */
    public function setHistoricClv($historic_clv)
    {
        $this->container['historic_clv'] = $historic_clv;

        return $this;
    }

    /**
     * Gets predicted_clv
     *
     * @return float|null
     */
    public function getPredictedClv()
    {
        return $this->container['predicted_clv'];
    }

    /**
     * Sets predicted_clv
     *
     * @param float|null $predicted_clv Predicted value of all placed orders in the next 365 days
     *
     * @return self
     */
    public function setPredictedClv($predicted_clv)
    {
        $this->container['predicted_clv'] = $predicted_clv;

        return $this;
    }

    /**
     * Gets total_clv
     *
     * @return float|null
     */
    public function getTotalClv()
    {
        return $this->container['total_clv'];
    }

    /**
     * Sets total_clv
     *
     * @param float|null $total_clv Sum of historic and predicted CLV
     *
     * @return self
     */
    public function setTotalClv($total_clv)
    {
        $this->container['total_clv'] = $total_clv;

        return $this;
    }

    /**
     * Gets historic_number_of_orders
     *
     * @return int|null
     */
    public function getHistoricNumberOfOrders()
    {
        return $this->container['historic_number_of_orders'];
    }

    /**
     * Sets historic_number_of_orders
     *
     * @param int|null $historic_number_of_orders Number of already placed orders
     *
     * @return self
     */
    public function setHistoricNumberOfOrders($historic_number_of_orders)
    {
        $this->container['historic_number_of_orders'] = $historic_number_of_orders;

        return $this;
    }

    /**
     * Gets predicted_number_of_orders
     *
     * @return float|null
     */
    public function getPredictedNumberOfOrders()
    {
        return $this->container['predicted_number_of_orders'];
    }

    /**
     * Sets predicted_number_of_orders
     *
     * @param float|null $predicted_number_of_orders Predicted number of placed orders in the next 365 days
     *
     * @return self
     */
    public function setPredictedNumberOfOrders($predicted_number_of_orders)
    {
        $this->container['predicted_number_of_orders'] = $predicted_number_of_orders;

        return $this;
    }

    /**
     * Gets average_days_between_orders
     *
     * @return float|null
     */
    public function getAverageDaysBetweenOrders()
    {
        return $this->container['average_days_between_orders'];
    }

    /**
     * Sets average_days_between_orders
     *
     * @param float|null $average_days_between_orders Average number of days between orders (None if only one order has been placed)
     *
     * @return self
     */
    public function setAverageDaysBetweenOrders($average_days_between_orders)
    {
        $this->container['average_days_between_orders'] = $average_days_between_orders;

        return $this;
    }

    /**
     * Gets average_order_value
     *
     * @return float|null
     */
    public function getAverageOrderValue()
    {
        return $this->container['average_order_value'];
    }

    /**
     * Sets average_order_value
     *
     * @param float|null $average_order_value Average value of placed orders
     *
     * @return self
     */
    public function setAverageOrderValue($average_order_value)
    {
        $this->container['average_order_value'] = $average_order_value;

        return $this;
    }

    /**
     * Gets churn_probability
     *
     * @return float|null
     */
    public function getChurnProbability()
    {
        return $this->container['churn_probability'];
    }

    /**
     * Sets churn_probability
     *
     * @param float|null $churn_probability Probability the customer has churned
     *
     * @return self
     */
    public function setChurnProbability($churn_probability)
    {
        $this->container['churn_probability'] = $churn_probability;

        return $this;
    }

    /**
     * Gets expected_date_of_next_order
     *
     * @return \DateTime|null
     */
    public function getExpectedDateOfNextOrder()
    {
        return $this->container['expected_date_of_next_order'];
    }

    /**
     * Sets expected_date_of_next_order
     *
     * @param \DateTime|null $expected_date_of_next_order Expected date of next order, as calculated at the time of their most recent order
     *
     * @return self
     */
    public function setExpectedDateOfNextOrder($expected_date_of_next_order)
    {
        $this->container['expected_date_of_next_order'] = $expected_date_of_next_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


