<?php
/**
 * EmailMarketing
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Klaviyo API
 *
 * The Klaviyo REST API. Please visit https://developers.klaviyo.com for more details.
 *
 * The version of the OpenAPI document: 2023-02-22
 * Contact: developers@klaviyo.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KlaviyoAPI\Model;

use \ArrayAccess;
use \KlaviyoAPI\ObjectSerializer;

/**
 * EmailMarketing Class Doc Comment
 *
 * @category Class
 * @package  KlaviyoAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailMarketing implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailMarketing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consent' => 'string',
        'timestamp' => '\DateTime',
        'method' => 'string',
        'method_detail' => 'string',
        'custom_method_detail' => 'string',
        'double_optin' => 'bool',
        'suppressions' => '\KlaviyoAPI\Model\EmailMarketingSuppression',
        'list_suppressions' => '\KlaviyoAPI\Model\EmailMarketingListSuppression'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consent' => null,
        'timestamp' => 'date-time',
        'method' => null,
        'method_detail' => null,
        'custom_method_detail' => null,
        'double_optin' => null,
        'suppressions' => null,
        'list_suppressions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consent' => 'consent',
        'timestamp' => 'timestamp',
        'method' => 'method',
        'method_detail' => 'method_detail',
        'custom_method_detail' => 'custom_method_detail',
        'double_optin' => 'double_optin',
        'suppressions' => 'suppressions',
        'list_suppressions' => 'list_suppressions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consent' => 'setConsent',
        'timestamp' => 'setTimestamp',
        'method' => 'setMethod',
        'method_detail' => 'setMethodDetail',
        'custom_method_detail' => 'setCustomMethodDetail',
        'double_optin' => 'setDoubleOptin',
        'suppressions' => 'setSuppressions',
        'list_suppressions' => 'setListSuppressions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consent' => 'getConsent',
        'timestamp' => 'getTimestamp',
        'method' => 'getMethod',
        'method_detail' => 'getMethodDetail',
        'custom_method_detail' => 'getCustomMethodDetail',
        'double_optin' => 'getDoubleOptin',
        'suppressions' => 'getSuppressions',
        'list_suppressions' => 'getListSuppressions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consent'] = $data['consent'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['method'] = $data['method'] ?? null;
        $this->container['method_detail'] = $data['method_detail'] ?? null;
        $this->container['custom_method_detail'] = $data['custom_method_detail'] ?? null;
        $this->container['double_optin'] = $data['double_optin'] ?? null;
        $this->container['suppressions'] = $data['suppressions'] ?? null;
        $this->container['list_suppressions'] = $data['list_suppressions'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['consent'] === null) {
            $invalidProperties[] = "'consent' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consent
     *
     * @return string
     */
    public function getConsent()
    {
        return $this->container['consent'];
    }

    /**
     * Sets consent
     *
     * @param string $consent The consent status for email marketing.
     *
     * @return self
     */
    public function setConsent($consent)
    {
        $this->container['consent'] = $consent;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime|null $timestamp The timestamp when consent record or updated for email marketing, in ISO 8601 format (YYYY-MM-DDTHH:MM:SS.mmmmmm).
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method The method by which the profile was subscribed to email marketing.
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets method_detail
     *
     * @return string|null
     */
    public function getMethodDetail()
    {
        return $this->container['method_detail'];
    }

    /**
     * Sets method_detail
     *
     * @param string|null $method_detail Additional details about the method by which the profile was subscribed to SMS marketing. This may be empty if no details were provided.
     *
     * @return self
     */
    public function setMethodDetail($method_detail)
    {
        $this->container['method_detail'] = $method_detail;

        return $this;
    }

    /**
     * Gets custom_method_detail
     *
     * @return string|null
     */
    public function getCustomMethodDetail()
    {
        return $this->container['custom_method_detail'];
    }

    /**
     * Sets custom_method_detail
     *
     * @param string|null $custom_method_detail Additional detail provided by the caller when the profile was subscribed. This may be empty if no details were provided.
     *
     * @return self
     */
    public function setCustomMethodDetail($custom_method_detail)
    {
        $this->container['custom_method_detail'] = $custom_method_detail;

        return $this;
    }

    /**
     * Gets double_optin
     *
     * @return bool|null
     */
    public function getDoubleOptin()
    {
        return $this->container['double_optin'];
    }

    /**
     * Sets double_optin
     *
     * @param bool|null $double_optin Whether the profile was subscribed to email marketing using a double opt-in.
     *
     * @return self
     */
    public function setDoubleOptin($double_optin)
    {
        $this->container['double_optin'] = $double_optin;

        return $this;
    }

    /**
     * Gets suppressions
     *
     * @return \KlaviyoAPI\Model\EmailMarketingSuppression|null
     */
    public function getSuppressions()
    {
        return $this->container['suppressions'];
    }

    /**
     * Sets suppressions
     *
     * @param \KlaviyoAPI\Model\EmailMarketingSuppression|null $suppressions suppressions
     *
     * @return self
     */
    public function setSuppressions($suppressions)
    {
        $this->container['suppressions'] = $suppressions;

        return $this;
    }

    /**
     * Gets list_suppressions
     *
     * @return \KlaviyoAPI\Model\EmailMarketingListSuppression|null
     */
    public function getListSuppressions()
    {
        return $this->container['list_suppressions'];
    }

    /**
     * Sets list_suppressions
     *
     * @param \KlaviyoAPI\Model\EmailMarketingListSuppression|null $list_suppressions list_suppressions
     *
     * @return self
     */
    public function setListSuppressions($list_suppressions)
    {
        $this->container['list_suppressions'] = $list_suppressions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


